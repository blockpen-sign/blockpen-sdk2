generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String // Encrypted password
  name            String?
  role            Role              @default(USER)
  walletAddress   String?           @unique
  apiKeys         ApiKey[] // Relation to ApiKey
  sessions        Session[] // Relation to Session
  documents       Document[] // Relation to Documents created by user
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Wallet          Wallet[]
  DocumentSigner  DocumentSigner[]
  TokenManagement TokenManagement[]
}

model ApiKey {
  id         String   @id @default(uuid())
  key        String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  usageCount Int      @default(0)
  usageLimit Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  address   String   @unique
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Document {
  id          String           @id @default(uuid())
  name        String
  content     String // Content of the document
  creatorId   String
  creator     User             @relation(fields: [creatorId], references: [id])
  signers     DocumentSigner[] // Relation to DocumentSigners
  coordinates Coordinate[] // Relation to Coordinates
  status      DocumentStatus   @default(PENDING)
  hash        String? // Hash of the document for verification
  signedAt    DateTime?
  rejectedAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model DocumentSigner {
  id         String       @id @default(uuid())
  documentId String
  document   Document     @relation(fields: [documentId], references: [id])
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  signedAt   DateTime?
  rejectedAt DateTime?
  status     SignerStatus @default(PENDING)
  role       String // Signer role, e.g., "Approver", "Observer"
  createdAt  DateTime     @default(now())
}

model Coordinate {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  x          Float // X coordinate on the document
  y          Float // Y coordinate on the document
  width      Float
  height     Float
  createdAt  DateTime @default(now())
}

enum DocumentStatus {
  PENDING
  SIGNED
  REJECTED
}

enum SignerStatus {
  PENDING
  SIGNED
  REJECTED
}

model TokenManagement {
  id        String    @id @default(uuid())
  tokenType TokenType
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
}

enum TokenType {
  ACCESS
  REFRESH
}

enum Role {
  USER
  ADMIN
}
